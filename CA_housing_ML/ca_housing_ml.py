# -*- coding: utf-8 -*-
"""CA_housing_ML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q9XTAf0FphmqnqVl40Ybx3CiVsMMOwXp
"""

# Install kaggle
!pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Download dataset
!kaggle datasets download -d camnugent/california-housing-prices

# Unzip dataset
!unzip california-housing-prices.zip

# Load dataset

import pandas as pd
data = pd.read_csv("housing.csv")
data.head()

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data.dropna(inplace=True)

from sklearn.model_selection import train_test_split

x = data.drop("median_house_value", axis=1)
y = data["median_house_value"]

data = pd.concat([x_train, y_train], axis=1)
data.hist(figsize=(15, 10))
plt.show()

data.head()

x.drop("ocean_proximity", axis=1, inplace = True)

sns.heatmap(data.corr(), annot=True)

plt.show()

data.head()

sns.heatmap(data.corr(), annot=True)
plt.figure(figsize=(10, 7))
plt.show()

data['total_bedrooms'] = np.log(data['total_bedrooms'] + 1 )
data['total_rooms'] = np.log(data['total_rooms'] + 1 )
data['population'] = np.log(data['population'] + 1 )
data['households'] = np.log(data['households'] + 1 )

train_data.hist(figsize=(15, 10))
plt.show()

plt.figure(figsize=(10, 7))
sns.scatterplot(x="longitude", y="latitude", data= data, hue = "median_house_value")
plt.show()

data['bedroom_ration'] = data['total_bedrooms'] / data['total_rooms']
data['household_rooms'] = data['total_rooms'] / data['households']
data['population_per_household'] = data['population'] / data['households']

sns.heatmap(data.corr(), annot=True)
plt.figure(figsize=(10, 7))
plt.show()

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression
reg = LinearRegression()

x_train = data.drop("median_house_value", axis=1).dropna()
y_train = train_data["median_house_value"].dropna()



reg.fit(x_train, y_train)

reg.score(x_train, y_train)

x_test = test_data.drop("median_house_value", axis=1).dropna()
y_test = test_data["median_house_value"].dropna()

reg.fit(x_test, y_test)

reg.score(x_test, y_test)

from sklearn.ensemble import RandomForestRegressor

rfr = RandomForestRegressor()

rfr.fit(x_train, y_train)

rfr.score(x_train, y_train)

rfr.fit(x_test, y_test)

rfr.score(x_test, y_test)

y_pred_rfr = rfr.predict(x_test)

from sklearn.metrics import mean_squared_error, r2_score

mse_rfr = mean_squared_error(y_test, y_pred_rfr)
r2_rfr = r2_score(y_test, y_pred_rfr)

print("\nRandom Forest Regression:")
print(f"Mean Squared Error: {mse_rfr}")
print(f"R-squared: {r2_rfr}")

